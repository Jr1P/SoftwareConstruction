//  0/1背包
for(int i = 1; i <= n; i++)
	for(int j = C; j >= c[i]; j--)
		dp[j] = max(dp[j], dp[j - c[i]] + v[i]);
	

//  完全背包
for(int i = 1; i <= n; i++)
	for(int j = c[i]; j <= C; j++)
		dp[j] = max(dp[j], dp[j - c[i] + v[i]]);

//  LCS
	if(a[i] == b[j])
		dp[i][j] = dp[i - 1][j - 1] + 1;
	else
		dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]);

//  LIS 最长不下降
	for(int i = 2; i <= n; i++)
		for(int j = 1; j < i; j++)
			if(a[i] > a[j])
				f[i] = max(f[i], f[j] + 1);	
	ans = max{f[i]};


//  最大子段和
	for(int i = 1; i <= n; i++) {
		f[i] = max(a[i], f[i - 1] + a[i]);
		ans = max(ans, f[i]);
	}


//  
